https://qiita.com/drken/items/f909b79ee03e679c7142
ソート
https://qiita.com/drken/items/44c60118ab3703f7727f
計算量オーダー
https://qiita.com/drken/items/872ebc3a2b5caaa4a0d0


オーダー記法
    Oで記述する
    計算時間を表す
    ex)
    O(nlogn^2)

コンピュータと時間
    10^8回のステップの計算に1秒かかる

アルゴリズム設計技法

    貪欲法
        何ステップも先のことを考えていくと、 選択肢の組合せが爆発的に増加していきます
        後先のことを考えず、その場その場での選択を繰り返していく考えのアルゴリズム設計技法

アルゴリズムの分類
    乱択アルゴリズム
    Las Vegasアルゴリズム ･･･ 計算時間が一定ではないかもしれない
    Monte Carloアルゴリズム ･･･計算時間が一定ではなく、計算結果が必ず正しいとは限らない
        将棋、オセロなどのAIにも使用される。必ず正しい手ではなく、悪手を算出することもある。

線形探索

    for文を1回まわしてできる処理

ソート
    小さい順に並び替える
    例 : 二分探索の前処理として使う
    例 : コンピュータグラフィックス分野において、様々な物体を描画したり物体の相互干渉などを考えたりするとき、左や下(上)から順番に物体を処理していくことが多いが、このとき物体の位置関係をあらかじめソートしておくことでスムーズな処理が可能になります

    クイックソート
    配列の中から適当な要素 pivot を選び出し、配列全体を「pivot 未満のグループ」「pivot 以上のグループ」に分割して、それぞれを再帰的に解きます。
    図 : https://camo.qiitausercontent.com/8dfecaa4884f0eac1580799da74bebc0b1f425ca/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3138323936332f35376566373832352d663435642d386264312d626637642d6138376662323133656230352e6a706567
    
    ex)
    def quick_sort(data):
        #分割できない(リスト要素が1以下)場合，そのままデータを返す(並べ替えの必要なし)
        if len(data) <= 1:
            return data

        pivot = data.pop(0)     #リストの先頭をピボットとして取り出す

        # ピボットより小さいものでリストを作る
        left = [i for i in data if i <= pivot]
        # ピボットより大きいものでリストを作る
        right = [i for i in data if i > pivot]

        #再帰
        left = quick_sort(left)     #左側
        right = quick_sort(right)   #右側

        #########再帰しきった結果のみ，quick_sort関数の出力として返される
        #########それ以外のreturnは上のleft = quick_sort(right), left = quick_sort(right)
        return left + [pivot] + right

